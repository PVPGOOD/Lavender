package io.justme.lavender.module.impl.exploit.disabler.impl;

import io.justme.lavender.events.game.EventTick;
import io.justme.lavender.events.game.EventWorldReload;
import io.justme.lavender.events.network.EventPacket;
import io.justme.lavender.events.player.EventMotionUpdate;
import io.justme.lavender.module.impl.exploit.disabler.AbstractDisabler;
import io.justme.lavender.module.impl.exploit.disabler.process.PacketProcessor;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;

/**
 * @author JustMe.
 * @since 2024/5/3
 **/

public class BlocksMC extends AbstractDisabler {

    public BlocksMC() {
        super("BlocksMC");
    }

    @Override
    public void onEnable() {

    }

    @Override
    public void onDisable() {

    }

    @Override
    public void onPacket(EventPacket event) {
        if(mc.thePlayer == null || mc.thePlayer.ticksExisted < 20) {
            if(!getDataProcessor().getDataQueue().isEmpty()) {
                getDataProcessor().getDataQueue().clear();
            }
        }

        switch (event.getEnumEventType()) {
            case INCOMING -> {
                if (event.getPacket() instanceof S00PacketKeepAlive keepAlive) {
                    getDataProcessor().getDataQueue().offer(keepAlive);
                    event.setCancelled(true);
                    getDataProcessor().processPacket(PacketProcessor.PacketEnum.C00);
                }

                if (event.getPacket() instanceof S32PacketConfirmTransaction confirmTransaction) {
                    getDataProcessor().getDataQueue().offer(confirmTransaction);
                    event.setCancelled(true);
                    getDataProcessor().processPacket(PacketProcessor.PacketEnum.C0F);
                }

            }

            case OUTGOING -> {

                if ((event.getPacket() instanceof C0BPacketEntityAction packet)) {
                    if (packet.getAction() == C0BPacketEntityAction.Action.STOP_SPRINTING && mc.currentScreen != null) {
                        mc.thePlayer.sendQueue.addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING));
                        mc.thePlayer.setSprinting(true);

                        event.setCancelled(true);
                    }
                }
            }
        }
    }

    @Override
    public void onMotionUpdate(EventMotionUpdate event) {

    }

    @Override
    public void onWorldReload(EventWorldReload event) {

    }

    @Override
    public void onTick(EventTick event) {

    }
}
