package io.justme.lavender.module.impl.exploit.disabler.impl;

import io.justme.lavender.events.game.EventTick;
import io.justme.lavender.events.network.EventPacket;
import io.justme.lavender.events.player.EventMotionUpdate;
import io.justme.lavender.events.player.EventMove;
import io.justme.lavender.module.impl.exploit.disabler.AbstractDisabler;
import io.justme.lavender.module.impl.exploit.disabler.process.PacketProcessor;
import io.justme.lavender.utility.math.TimerUtility;
import lombok.Getter;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.server.S00PacketKeepAlive;

/**
 * @author JustMe.
 * @since 2024/5/2
 **/
@Getter
public class WatchdogDisabler extends AbstractDisabler {

    private final TimerUtility timerUtility = new TimerUtility();

    public WatchdogDisabler() {
        super("Watchdog");
    }

    @Override
    public void onEnable() {

    }

    @Override
    public void onDisable() {

    }

    @Override
    public void onPacket(EventPacket eventPacket) {
        if(mc.thePlayer == null || mc.thePlayer.ticksExisted < 20) {
            if(!getDataProcessor().getDataQueue().isEmpty()) {
                getDataProcessor().getDataQueue().clear();
            }
        }

        switch (eventPacket.getEnumEventType()) {
            case INCOMING -> {
                if (eventPacket.getPacket() instanceof S00PacketKeepAlive keepAlive) {
                    getDataProcessor().offerPacket(keepAlive);
                    eventPacket.setCancelled(true);
                }
            }

            case OUTGOING -> {

                if (eventPacket.getPacket() instanceof C0BPacketEntityAction) {
                    eventPacket.setCancelled(true);
                }
            }
        }
    }

    @Override
    public void onMotionUpdate(EventMotionUpdate event) {
        if (getTimerUtility().hasTimeElapsed(500,true)) {
            getDataProcessor().processPacket(PacketProcessor.PacketEnum.C00);
        }
    }

    @Override
    public void onTick(EventTick event) {

    }
}
