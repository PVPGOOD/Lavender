package io.justme.lavender.module.impl.exploit.disabler;

import io.justme.lavender.events.game.EventTick;
import io.justme.lavender.events.network.EventPacket;
import io.justme.lavender.module.Category;
import io.justme.lavender.module.Module;
import io.justme.lavender.module.ModuleInfo;
import io.justme.lavender.module.impl.exploit.disabler.process.PacketProcessor;
import io.justme.lavender.utility.network.PacketUtility;
import lombok.Getter;
import lombok.Setter;
import net.lenni0451.asmevents.event.EventTarget;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.server.S00PacketKeepAlive;

/**
 * @author JustMe.
 * @since 2024/5/2
 **/

@Getter
@Setter
@ModuleInfo(name = "Disabler", description = "IDK.", category = Category.FIGHT)
public class Disabler extends Module {

    private final PacketUtility packetUtility = new PacketUtility();

    public Disabler() {

    }

    @Override
    public void onDisable() {
        super.onDisable();
    }

    @Override
    public void onEnable() {
        super.onEnable();
    }

    private PacketProcessor dataProcessor = new PacketProcessor();
    @EventTarget
    public void onPacket(EventPacket eventPacket) {

        if(mc.thePlayer == null || mc.thePlayer.ticksExisted < 20) {
            if(!getDataProcessor().getDataQueue().isEmpty()) {
                getDataProcessor().getDataQueue().clear();
            }
        }

        switch (eventPacket.getEnumEventType()) {
            case INCOMING -> {
                if (eventPacket.getPacket() instanceof S00PacketKeepAlive keepAlive) {
                    getDataProcessor().offerPacket(keepAlive);
                    eventPacket.setCancelled(true);
                }
            }

            case OUTGOING -> {

                if (eventPacket.getPacket() instanceof C0BPacketEntityAction) {
                    eventPacket.setCancelled(true);
                }
            }
        }
    }

    @EventTarget
    public void onTicks(EventTick eventTick) {
        getDataProcessor().processPacket(PacketProcessor.PacketEnum.C00);
    }
}
