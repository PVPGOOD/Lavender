package io.justme.lavender.module.impl.exploit;

import io.justme.lavender.La;
import io.justme.lavender.events.game.EventTick;
import io.justme.lavender.events.network.EventPacket;
import io.justme.lavender.events.player.EventUpdate;
import io.justme.lavender.module.Category;
import io.justme.lavender.module.Module;
import io.justme.lavender.module.ModuleInfo;
import io.justme.lavender.utility.math.MathUtility;
import io.justme.lavender.utility.math.TimerUtility;
import io.justme.lavender.utility.network.PacketUtility;
import lombok.Getter;
import lombok.Setter;
import net.lenni0451.asmevents.event.EventTarget;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C0BPacketEntityAction;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledExecutorService;

/**
 * @author JustMe.
 * @since 2024/5/2
 **/

@Getter
@Setter
@ModuleInfo(name = "Disabler", description = "IDK.", category = Category.FIGHT)
public class Disabler extends Module {

    private ConcurrentLinkedQueue<Packet<?>> updateQueue;

    private final PacketUtility packetUtility = new PacketUtility();
    private final TimerUtility timerUtility = new TimerUtility();

    public Disabler() {
        updateQueue = new ConcurrentLinkedQueue<>();
    }

    @Override
    public void onDisable() {
        super.onDisable();
    }

    @Override
    public void onEnable() {
        super.onEnable();
    }

    @EventTarget
    public void onPacket(EventPacket eventPacket) {

        if(mc.thePlayer == null || mc.thePlayer.ticksExisted < 20) {
            if(!getUpdateQueue().isEmpty()) {
                getUpdateQueue().clear();
            }
        }

        switch (eventPacket.getEnumEventType()) {
            case INCOMING -> {}

            case OUTGOING -> {

                if (eventPacket.getPacket() instanceof C00PacketKeepAlive keepAlive) {
                    getUpdateQueue().offer(keepAlive);
                    eventPacket.setCancelled(true);
                }

                if (eventPacket.getPacket() instanceof C0BPacketEntityAction) {
                    eventPacket.setCancelled(true);
                }
            }
        }
    }

    @EventTarget
    public void onTicks(EventTick eventTick) {

        synchronized (getUpdateQueue()) {
            if (getUpdateQueue().poll() instanceof C00PacketKeepAlive keepAlive)
            {
               La.getINSTANCE().print(String.valueOf(keepAlive.getKey()));
            }

        }
    }
}
