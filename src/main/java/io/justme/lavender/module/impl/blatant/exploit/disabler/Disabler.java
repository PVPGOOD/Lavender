package io.justme.lavender.module.impl.blatant.exploit.disabler;

import io.justme.lavender.events.game.EventTick;
import io.justme.lavender.events.game.EventWorldReload;
import io.justme.lavender.events.network.EventPacket;
import io.justme.lavender.events.player.EventMotionUpdate;
import io.justme.lavender.events.player.EventUpdate;
import io.justme.lavender.events.render.Event2DRender;
import io.justme.lavender.module.Category;
import io.justme.lavender.module.Module;
import io.justme.lavender.module.ModuleInfo;
import io.justme.lavender.value.impl.ModeValue;
import lombok.Getter;
import lombok.Setter;
import net.lenni0451.asmevents.event.EventTarget;
import net.minecraft.network.Packet;

/**
 * @author JustMe.
 * @since 2024/5/2
 **/

@Getter
@Setter
@ModuleInfo(name = "Disabler", description = "IDK.", category = Category.FIGHT)
public class Disabler extends Module {

    private final ModeValue disablerMode = new ModeValue("Mode", new String[]{"Watchdog", "BlocksMC"}, "Watchdog");


    public Disabler() {
        AbstractDisabler.onInitialization();
    }

    @Override
    public void onEnable() {
        var abstractDisabler = AbstractDisabler.find(disablerMode.getValue());
        abstractDisabler.onEnable();
        super.onEnable();
    }

    @Override
    public void onDisable() {
        var abstractDisabler = AbstractDisabler.find(disablerMode.getValue());
        abstractDisabler.onDisable();
        super.onDisable();
    }

    @EventTarget
    public void onMotion(EventMotionUpdate eventMotionUpdate) {
        var abstractDisabler = AbstractDisabler.find(disablerMode.getValue());
        abstractDisabler.onMotionUpdate(eventMotionUpdate);
    }

    @EventTarget
    public void onUpdate(EventUpdate eventUpdate) {
        var abstractDisabler = AbstractDisabler.find(disablerMode.getValue());
        abstractDisabler.onUpdate(eventUpdate);
    }

    @EventTarget
    public void onPacket(EventPacket eventPacket) {
        var abstractDisabler = AbstractDisabler.find(disablerMode.getValue());
        abstractDisabler.onPacket(eventPacket);
    }

    @EventTarget
    public void on2D(Event2DRender event2DRender) {
        var abstractDisabler = AbstractDisabler.find(disablerMode.getValue());
        abstractDisabler.on2D(event2DRender);
    }

    @EventTarget
    public void onWorldReload(EventWorldReload eventWorldReload) {
        var abstractDisabler = AbstractDisabler.find(disablerMode.getValue());
        abstractDisabler.onWorldReload(eventWorldReload);
    }

    @EventTarget
    public void onTicks(EventTick eventTick) {
        var abstractDisabler = AbstractDisabler.find(disablerMode.getValue());
        abstractDisabler.onTick(eventTick);
    }

    /**
     * 处理客户端发送的数据包。
     * 该方法在数据包即将发送时触发。
     *
     * @param packet 客户端出站口 数据包
     **/
    @EventTarget
    public void onInvokePacket(Packet<?> packet) {
        var abstractDisabler = AbstractDisabler.find(disablerMode.getValue());
        abstractDisabler.onInvokePacket(packet);
    }
}
