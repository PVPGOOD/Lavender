package io.justme.lavender.module.impl.exploit.packetDebugger;

import io.justme.lavender.events.network.EventPacket;
import io.justme.lavender.events.player.EventMotionUpdate;
import io.justme.lavender.events.render.Event2DRender;
import io.justme.lavender.module.Category;
import io.justme.lavender.module.Module;
import io.justme.lavender.module.ModuleInfo;
import io.justme.lavender.utility.math.TimerUtility;
import io.justme.lavender.value.impl.BoolValue;
import lombok.Getter;
import net.lenni0451.asmevents.event.EventTarget;
import net.minecraft.client.Minecraft;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;

import java.awt.*;
import java.util.LinkedList;

/**
 * @author JustMe.
 * @since 2024/5/2
 **/

@Getter
@ModuleInfo(name = "PacketDebugger", description = "", category = Category.WORLD)
public class PacketDebugger extends Module {

    private final LinkedList<PacketObject> clientPackets = new LinkedList<>();
    private final LinkedList<PacketObject> serverPackets = new LinkedList<>();

    private final BoolValue
            clientSide = new BoolValue("clientSide",false),
            ServerSide = new BoolValue("ServerSide",false),
            autoReset = new BoolValue("autoRest",false);

    private final TimerUtility timerUtility = new TimerUtility();

    @Override
    public void onDisable() {
        super.onDisable();
    }

    @Override
    public void onEnable() {
        super.onEnable();
    }

    @EventTarget
    public void onPacket(EventPacket eventPacket) {

        switch (eventPacket.getEnumEventType()) {
            case OUTGOING -> {
                labelServerPacket:
                {

                    for (PacketObject packet : getServerPackets()) {
                        if (packet.getName().equals(eventPacket.getPacket().getClass().getSimpleName())) {
                            packet.increase();
                            break labelServerPacket;
                        }
                    }

                    if (getClientPacket(eventPacket)) {
                        getServerPackets().add(new PacketObject(eventPacket.getPacket()));
                    }
                }
            }

            case INCOMING -> {
                labelClientPacket:
                {
                    for (PacketObject packet : getClientPackets()) {
                        if (packet.getName().equals(eventPacket.getPacket().getClass().getSimpleName())) {
                            packet.increase();
                            break labelClientPacket;
                        }
                    }

                    if (getServerSidePacket(eventPacket)) {
                        getClientPackets().add(new PacketObject(eventPacket.getPacket()));
                    }
                }
            }
        }
    }

    @EventTarget
    public void on2D(Event2DRender event2DRender) {
        if (getServerSide().getValue()) {
            getServerPackets().sort((o1, o2) -> o2.getQuantity() - o1.getQuantity());

            float serverPacketTextY = 103;
            for (int i = 0; i < getServerPackets().size(); i++) {
                var packet = getServerPackets().get(i);
                mc.fontRendererObj.drawStringWithShadow(buildString(packet.getName(), " ", packet.getQuantity()), 180, serverPacketTextY, new Color(255, 255, 255).getRGB());
                serverPacketTextY += 8;
            }
        }

        if (getClientSide().getValue()) {
            getClientPackets().sort((o1, o2) -> o2.getQuantity() - o1.getQuantity());
            float clientPacketTextY = 103;

            for (int i = 0; i < getClientPackets().size(); i++) {
                var packet = getClientPackets().get(i);
                mc.fontRendererObj.drawStringWithShadow(buildString(packet.getName(), " ", packet.getQuantity()), 4, clientPacketTextY, new Color(255, 255, 255).getRGB());
                clientPacketTextY += 8;
            }
        }
    }

    @EventTarget
    public void onMotion(EventMotionUpdate eventMotionUpdate) {
        if (Minecraft.getMinecraft().thePlayer == null) {
            getServerPackets().clear();
            getClientPackets().clear();
        }

        if (getAutoReset().getValue() && getTimerUtility().hasTimeElapsed(10000,true)) {
            getServerPackets().clear();
            getClientPackets().clear();
        }
    }


    public static String buildString(Object... objects) {
        StringBuilder builder = new StringBuilder();

        for (Object object : objects) {
            builder.append(object);
        }
        return builder.toString();
    }

    public boolean getServerSidePacket(EventPacket eventPacket) {
        var packet = eventPacket.getPacket();

        return packet instanceof S00PacketKeepAlive ||
                packet instanceof S01PacketJoinGame ||
                packet instanceof S02PacketChat ||
                packet instanceof S03PacketTimeUpdate ||
                packet instanceof S04PacketEntityEquipment ||
                packet instanceof S05PacketSpawnPosition ||
                packet instanceof S06PacketUpdateHealth ||
                packet instanceof S07PacketRespawn ||
                packet instanceof S08PacketPlayerPosLook ||
                packet instanceof S09PacketHeldItemChange ||
                packet instanceof S0APacketUseBed ||
                packet instanceof S0BPacketAnimation ||
                packet instanceof S0CPacketSpawnPlayer ||
                packet instanceof S0DPacketCollectItem ||
                packet instanceof S0EPacketSpawnObject ||
                packet instanceof S0FPacketSpawnMob ||
                packet instanceof S10PacketSpawnPainting ||
                packet instanceof S11PacketSpawnExperienceOrb ||
                packet instanceof S12PacketEntityVelocity ||
                packet instanceof S13PacketDestroyEntities ||
                packet instanceof S14PacketEntity ||
                packet instanceof S14PacketEntity.S15PacketEntityRelMove ||
                packet instanceof S14PacketEntity.S16PacketEntityLook ||
                packet instanceof S14PacketEntity.S17PacketEntityLookMove ||
                packet instanceof S18PacketEntityTeleport ||
                packet instanceof S19PacketEntityHeadLook ||
                packet instanceof S19PacketEntityStatus ||
                packet instanceof S1BPacketEntityAttach ||
                packet instanceof S1CPacketEntityMetadata ||
                packet instanceof S1DPacketEntityEffect ||
                packet instanceof S1EPacketRemoveEntityEffect ||
                packet instanceof S1FPacketSetExperience ||
                packet instanceof S20PacketEntityProperties ||
                packet instanceof S21PacketChunkData ||
                packet instanceof S22PacketMultiBlockChange ||
                packet instanceof S23PacketBlockChange ||
                packet instanceof S24PacketBlockAction ||
                packet instanceof S25PacketBlockBreakAnim ||
                packet instanceof S26PacketMapChunkBulk ||
                packet instanceof S27PacketExplosion ||
                packet instanceof S28PacketEffect ||
                packet instanceof S29PacketSoundEffect ||
                packet instanceof S2APacketParticles ||
                packet instanceof S2BPacketChangeGameState ||
                packet instanceof S2CPacketSpawnGlobalEntity ||
                packet instanceof S2DPacketOpenWindow ||
                packet instanceof S2EPacketCloseWindow ||
                packet instanceof S2FPacketSetSlot ||
                packet instanceof S30PacketWindowItems ||
                packet instanceof S31PacketWindowProperty ||
                packet instanceof S32PacketConfirmTransaction ||
                packet instanceof S33PacketUpdateSign ||
                packet instanceof S34PacketMaps ||
                packet instanceof S35PacketUpdateTileEntity ||
                packet instanceof S36PacketSignEditorOpen ||
                packet instanceof S37PacketStatistics ||
                packet instanceof S38PacketPlayerListItem ||
                packet instanceof S39PacketPlayerAbilities ||
                packet instanceof S3APacketTabComplete ||
                packet instanceof S3BPacketScoreboardObjective ||
                packet instanceof S3CPacketUpdateScore ||
                packet instanceof S3DPacketDisplayScoreboard ||
                packet instanceof S3EPacketTeams ||
                packet instanceof S3FPacketCustomPayload ||
                packet instanceof S40PacketDisconnect ||
                packet instanceof S41PacketServerDifficulty ||
                packet instanceof S42PacketCombatEvent ||
                packet instanceof S43PacketCamera ||
                packet instanceof S44PacketWorldBorder ||
                packet instanceof S45PacketTitle ||
                packet instanceof S46PacketSetCompressionLevel ||
                packet instanceof S47PacketPlayerListHeaderFooter ||
                packet instanceof S48PacketResourcePackSend || packet instanceof S49PacketUpdateEntityNBT;
    }
    
    public boolean getClientPacket(EventPacket eventPacket) {

        var packet = eventPacket.getPacket();

        return packet instanceof C00PacketKeepAlive ||
        packet instanceof C01PacketChatMessage ||
        packet instanceof C02PacketUseEntity ||
        packet instanceof C03PacketPlayer ||
        packet instanceof C03PacketPlayer.C04PacketPlayerPosition ||
        packet instanceof C03PacketPlayer.C05PacketPlayerLook ||
        packet instanceof C03PacketPlayer.C06PacketPlayerPosLook ||
        packet instanceof C07PacketPlayerDigging ||
        packet instanceof C08PacketPlayerBlockPlacement ||
        packet instanceof C09PacketHeldItemChange ||
        packet instanceof C0APacketAnimation ||
        packet instanceof C0BPacketEntityAction ||
        packet instanceof C0CPacketInput ||
        packet instanceof C0DPacketCloseWindow ||
        packet instanceof C0EPacketClickWindow ||
        packet instanceof C0FPacketConfirmTransaction ||
        packet instanceof C10PacketCreativeInventoryAction ||
        packet instanceof C11PacketEnchantItem ||
        packet instanceof C12PacketUpdateSign ||
        packet instanceof C13PacketPlayerAbilities ||
        packet instanceof C14PacketTabComplete ||
        packet instanceof C15PacketClientSettings ||
        packet instanceof C16PacketClientStatus ||
        packet instanceof C17PacketCustomPayload ||
        packet instanceof C18PacketSpectate ||
        packet instanceof C19PacketResourcePackStatus;
    }
}
