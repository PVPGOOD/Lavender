package io.justme.lavender.module.impl.exploit.disabler.process;

import io.justme.lavender.La;
import io.justme.lavender.utility.math.TimerUtility;
import io.justme.lavender.utility.network.PacketUtility;
import lombok.Getter;
import lombok.Setter;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S00PacketKeepAlive;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;

import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * @author JustMe.
 * @since 2024/5/2
 **/

@Getter
@Setter
public class PacketProcessor {

    public final PacketEnum packetEnum = getPacketEnum();
    public final Queue<Packet<?>> dataQueue = new ConcurrentLinkedQueue<>();
    public final PacketUtility packetUtility = new PacketUtility();

    public void offerPacket(Packet<?> newData) {
        getDataQueue().offer(newData);
    }

    public void processPacket(PacketEnum packetEnum) {
        var data = getDataQueue().poll();
        if (data != null) {
            sendData(data,packetEnum);
        }
    }

    private void sendData(Packet<?> data, PacketEnum packetEnum) {

        switch (packetEnum) {
            case C00 -> {
                if (data instanceof S00PacketKeepAlive keepAlive) {
                    La.getINSTANCE().print("Process 0","Disabler");
                    getPacketUtility().sendPacket(new C00PacketKeepAlive(keepAlive.func_149134_c()));
                }
            }

            //暂时没好的思路
            case C0F -> {
                if (data instanceof S32PacketConfirmTransaction confirmTransaction) {
                    La.getINSTANCE().print("Process F");
                    getPacketUtility().sendPacket(new C0FPacketConfirmTransaction(confirmTransaction.getWindowId(),confirmTransaction.getActionNumber(),true));
                }

            }
            case C0D -> {}
            case C0E -> {}
            case C16 -> {}

            default -> getPacketUtility().sendPacket(data);
        }

    }

    public enum PacketEnum {
        C00,
        C0F,
        C0D,
        C0E,
        C16,
    }
}
