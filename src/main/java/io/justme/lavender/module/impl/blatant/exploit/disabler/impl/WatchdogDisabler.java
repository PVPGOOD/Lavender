package io.justme.lavender.module.impl.blatant.exploit.disabler.impl;

import io.justme.lavender.La;
import io.justme.lavender.events.game.EventTick;
import io.justme.lavender.events.game.EventWorldReload;
import io.justme.lavender.events.network.EventPacket;
import io.justme.lavender.events.player.EventMotionUpdate;
import io.justme.lavender.events.player.EventUpdate;
import io.justme.lavender.events.render.Event2DRender;
import io.justme.lavender.module.impl.blatant.exploit.disabler.AbstractDisabler;
import io.justme.lavender.utility.math.MathUtility;
import io.justme.lavender.utility.math.TimerUtility;
import io.justme.lavender.utility.player.PlayerUtility;
import lombok.Getter;
import lombok.Setter;
import net.minecraft.client.Minecraft;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;

import java.util.ArrayList;

/**
 * @author JustMe.
 * @since 2024/5/2
 **/
@Getter
@Setter
public class WatchdogDisabler extends AbstractDisabler {

    private final TimerUtility timerUtility = new TimerUtility();
    private final ArrayList<Packet<?>> minecraftPackets = new ArrayList<>();
    private final ArrayList<Packet<?>> laPackets = new ArrayList<>();


    public WatchdogDisabler() {
        super("Watchdog");
    }

    @Override
    public void onEnable() {

    }

    @Override
    public void onDisable() {

    }

    private int flagged;
    public boolean finished = false;
    private int offGroundTicks;
    private boolean NotOnGrounding;

    @Override
    public void onPacket(EventPacket eventPacket) {
        if(mc.thePlayer == null || mc.isSingleplayer()) return;
        if (mc.thePlayer.ticksExisted < 5) return;

        boolean compass = false;
        for (int i = 0; i < 9; i++) {
            final ItemStack stackInSlot = mc.thePlayer.inventory.getStackInSlot(i);
            if (stackInSlot != null && stackInSlot.getUnlocalizedName().toLowerCase().contains("compass")) {
                compass = true;
            }
        }

        if (compass) return;

        if (eventPacket.getPacket() instanceof S08PacketPlayerPosLook && !isFinished()) {
            flagged++;
            La.getINSTANCE().print(flagged + " / 20" , "Disabler");
            if (this.flagged == 20) {
                finished = true;
                flagged = 0;
                setNotOnGrounding(false);
                La.getINSTANCE().print("WatchDog Motion disabled.");
            }
        }

    }

    @Override
    public void onUpdate(EventUpdate eventUpdate) {
        if (PlayerUtility.isOnGround()) {
            offGroundTicks = 0;
        } else {
            offGroundTicks++;
        }
    }

    @Override
    public void on2D(Event2DRender event) {

    }

    @Override
    public void onMotionUpdate(EventMotionUpdate event) {


        boolean compass = false;
        for (int i = 0; i < 9; i++) {
            final ItemStack stackInSlot = mc.thePlayer.inventory.getStackInSlot(i);
            if (stackInSlot != null && stackInSlot.getUnlocalizedName().toLowerCase().contains("compass")) {
                compass = true;
            }
        }

        if (mc.thePlayer.ticksExisted < 5) return;
        if (compass) return;
        if (isFinished()) return;

        if (PlayerUtility.isOnGround()) {
            mc.thePlayer.jump();
        } else if (offGroundTicks >= 9) {

            if (mc.thePlayer.ticksExisted % 2 == 0) {
                event.setZ(event.getZ() + MathUtility.round(0.1, 0.41));  // 0.095
                event.setY(event.getY() + MathUtility.round(0.1, 0.41));  // 0.095
            }

            mc.thePlayer.motionX = mc.thePlayer.motionY = mc.thePlayer.motionZ = 0;
        }
    }

    @Override
    public void onWorldReload(EventWorldReload event) {
        finished = false;
        flagged = 0;
        setNotOnGrounding(false);
    }

    @Override
    public void onTick(EventTick event) {

    }

    @Override
    public void onInvokePacket(Packet<?> packet) {
        Minecraft.getMinecraft().getNetHandler().getNetworkManager().sendFinalPacket(packet);
    }
}
